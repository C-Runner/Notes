笔记：
开机流程：
    BIOS -> MBR -> 开机管理程序boot loader -> OS核心文件
boot lodaer：
    提供选单：选择不同的开机项目
    载入核心文件：直接指向可开机的程序区域来开始操作系统
    转交其他loader：将开机管理功能交给其他loader负责（可见多重引导）

MBR：早期的分区格式，放在磁盘的一个扇区，通常是512bytes，这512bytes有两个数据：
    1.主要启动及录取(Master Boot Record, MBR)：可以安装开启管理程序的地方，446bytes
    2.分表区(partition table)：记录整个硬盘分区的状态，64bytes
    3.由于分区表只有64bytes，所以最多仅有四组记录，每组记录该区域的始末磁柱号码，该四个分区被称为主要和延伸分区槽。
    4.当想分区分超过四个区域时，硬盘的主要分区存放主要分区磁柱，延伸分区：使用额外的扇区来记录分区信息，其本身不能被拿来初始化，然后我们就可以通过延伸分区指向的那个区块继续作分区记录了。
    5.当使用逻辑分区时，会保留sda3,sda4，1234给主要分区和延伸分区
    6.同一种分区可以合并与分拆空间，不同则不允许

GPT: 新的4k扇区设计格式，分为3个部分，第一部分的LBA0预留给MBR（兼容），LBA1为GPT表头记录，记录了本身的位置和大小、备份用的GPT分区位置，同时放置了饭去表的检验机制码，os可以根据它来判断GPT是否正确，错有错误可以取得备份的来恢复。 LBA2-33（实际记录分区信息处）：LBA2开始，每个LBA可以记录4笔分区记录，因为每个LBA有512bytes，所以每笔记录总共可以有4*32=128byte长度，所以每一笔本身的记录外提供了64bityes来记录始末扇区号码，对于没有分区槽来说，做大的容量再2^64=8zb，1zb=2^30Tb
    由于GPT分区多达128比记录，而linux本身对linux只有最大15个分区槽，但其kernel透过udev等方式处理，linux已经没有这个限制了
    GPT也没有所谓的主，延伸，逻辑分区的概念了，每个分区都可以视为主分区
    

CMOS: 记录各项硬件参数，嵌入再主板的存储器上面

BIOS: 写入到主板的程序，开机时os会主动执行的第一个程序
    1.BIOS会分析计算机有哪些存储设备，根据使用者设定取得能够开机的硬盘，读取第一扇区的MBR位置，MBR仅有446bytes的硬盘空间放置最基本的开机管理程序，此时BIOS功德圆满，接着就是MBR内开机程序工作了
    2.开机程序的目的在于加载核心文件，因为其由os提供的，因此能获取到所需要的核心文件，接下来就是核心文件再工作了，此后的工作就是os了
    3.如果分区表是GPT格式的话，那么BIOS也能从LBA-de中读取第一阶段的开机程序，如果开机程序能够认识GPT得话，那么BIOS也能读取正确的操作系统核心。但是如果开机程序不认识GPT就自然无法开机了
    4.LBA0只提供第一阶段的开机管理程序代码，如果使用grub等开机程序的话，就需要额外的bios boot分区槽，这个分区槽才能防置开机程序的代码

多重引导：
    1. 每个分区都有自己的启动扇区(boot sector)
    2. 实际可开机的核心文件存放到各分区槽内，
    3. loader只认识自己的系统槽内的可开机额核心文件，以及其他loader
    4. loader可直接指向或者是间接将管理权转交给另一个管理程序
    注：linux安装时可以将boot loader安装在MBR或者各分区的启动扇区，linux的loader可以手动设置选单，所以再Linux的boot loader里面加入linux开机选项
        windows 则覆盖MBR和自己所在的穷的那个扇区，因此没有选择功能

UEFI:  BIOS用汇编，而UEFI用c编写，可以看作为一个低阶的操作系统，开机速度比BIOS快很多
    1.在发展的时候制定了一些控制在里面，包括硬件资源的管理使用轮询方式，比BIOS直接了解CPU以中断的方式来管理比较效率会慢一点，另外UEFI不能提供完整的快取功能，因此效率也没有办法提升
    2.由于加载所有的UEFI驱动程序后，系统会开启一个类似shell环境，用户可以在此执行UEFI程序，效果比MSDOS好
    3.因为效果华丽效能不高，所以UEFI大多用作启动OS之前的硬件检测，开机管理，软件设定等目的，记本上比较难，一般加载OS后UEFI就会停止工作。
    4.因为过去黑客经常在BIOS开机阶段破坏系统，因此UEFI加入了所谓的secureboot机制，意味着开机的操作系统必须被UEFI验证，否则无法开机。而微软用很多这样的机制管理硬件，但是启动后许多操作系统无法开机，此时就要关闭了
    5.与BIOS比较，虽然UEFI可以直接取得GPT分区，但最好还是拥有BIOS boot分区槽支持，同时为了兼容Windows，并且提供第三方使用的UEFI应用程序存储空间，必须格式化一个vfat文件系统，512-1g带线啊哦，方便其他UEFI执行
    tips:由于UEFI客服BIOS1024磁柱的问题，所以开机管理程序核心可以放置在硬盘前2t的位置，加上之前踢到的BIOS boot以及UEFI支持的分区槽，基本上/boot基本都是/dev/sda3之后的号码

Linux目录结构：
    整个目录树架构最重要的是根目录(/)，所有文件都是由/衍生的
    挂载：利用一个目录当成进入点，将磁盘分区槽的数据放在该目录下，也就是说进入该目录就进入该分区槽，这个动作称之为挂在，进入点的那个目录就是挂载点

文件系统格式：
    标准分区区：分区槽,vad1等
    LVM：弹性增减文件系统容量的装置
    ext2/3/4：早期文件类型，3，4多了文件系统日志记录，对系统复原比较快速，磁盘容量变大，ext有点驾驭不住了
    swap：硬盘仿真成内存，不会使用目录树挂在，所以不需要指定挂载点
    BIOS Boot： GPT分表用得到，MBR就不需要了
    xfs：Centos预设，对大容量的磁盘管理非常好，格式化速度飞快
    vfat: Linux与Windows所支持，可以用于数据交互

挂载点：
    /boot ： 开机信息
    / 根目录
    

图形界面：
重启X Windows：ctrl + alt + backspace
    当图形界面有问题，卡死等情况，可以执行

X Windwos 与 文本模式:
    Linux预定6个Terminal来让使用者登录，切换方式为ctrl+alt+F1-6。
    如果Linux设置的是纯文本那么启动界面则输入：startx，在哪个tty启动x的就哪个tty为图形界面终端。注需要安装xindows system

帮助文档：
1. command --help： 会输出帮助信息
2. man：man的指令描述，如man(1)其数字意义为：
        1-用户在shell中可以执行的指令或者可执行文件
        2-系统核心可呼叫的函数和工具等
        3-function，library，一般为c的lib
        4-装置文件说明，一般在/dev下
        5-配置文件或者某些文件的格式
        6-游戏
        7-惯例与协议等，如Linux文件系统、网络协议、ASCII code等
        8-管理员可用的管理指令
        9-与kernel有关的文件
    
    man内容划分：一般可以按1-3-4-8-6看
        NAME            简短的指令、数据名称说明
        SYNOPSIS        简短指令下达语法介绍
        DESCRIPTION     较为完整的说明
        OPTIONS         针对SYNOPSIS中，有列举的所有可用的选项说明
        COMMAND         当程序执行时，可以在次程序中下达的指令
        FILES           这个文件或数据所使用或参考或连接到的某些文件
        SEE ALSO        可以参考与这个指令有关的其他说明
        EXAMPLE         参考返利
    
    在man中的命令
        空格，PageDowdn：下一页
        PageUp ：上一页
        Home：第一页
        End：最后一页
        /string：向下查找， ?：向上查找
        n,N：正反向下一个
    
    搜索所有指令帮助手册
        -f ： 精准搜索，如 man(1)  xxxxxxx   man(7) xxxxxxxxx
        -k ： 模糊搜索
        建立mandb后，以上两个指令可以分别对应whatis command， apropos command

3. info：与man不同的是将信息拆分多段多页面显示，每个独立的页面称为一个节点
    第一行信息： File 代表这个info来源哪个info文件提供的
                Node 当前页面节点
                Next 跳到以一个节点的名称
                Prev 前一个节点信息
                Up   返回上一层

    命令：      
        空格，PageDowdn：下一页
        PageUp：上一页
        tab：node之间移动，在top的*之间
        Enter：进入选中的node
        b：该info的第一行
        e：该info的最后一行
        n：下一个node
        p：上一个node
        u：上一层
        s(/)：向上查找
        h,?：求助

4. document：一般在/usr/share/doc中，这是软件的文档

数据同步写入硬盘:sync
关机命令：
shutdown [-krhc] [time] [warning]
    -k: 只发送警告信息，并非真正关机
    -r：重启
    -h：指定时间后立即关机
    -c：取消进行的shutdown
    时间：指定关机时间，默认1分钟
        now：立即
        20:25：当天某时某分，若今天已过该时间则为次日
        +10：10分钟
halt: 系统停止，屏幕可能保存系统已停止信息
poweroff：关机
重启：reboot 

文件权限
ll看到的信息：文件类型 权限 连接数 拥有者 所属群组 文件大小 最后修改时间 名
文件类型：d 目录， - 文件， l 链接文件， b 可存取设备， c 串口设备(鼠标键盘等)，s 数据接口文件（socket），p 数据传输文件（fifo,pip）

umask xxx：文件预置权限， -S会以ugo wrx显示，但umask则显示当前设置
    创建文件目录时，会将文件目录的权限将umask（非-S)的权限去掉

修改文件属性与权限：
chgrp [-R] xxx:修改所属群组, -R 一并修改该目录下所有此目录文件群组
chown：修改拥有者：chown [-R] userName/group:userName fileName，用户群组必须存在
chmod: 修改权限：u：用户，g：群组，o：其他，a：全部
        数字法r4 w2 x1，修改时需要将a三个权限组合，如chmod [-R] 777 fName
        符号法：+ - =，使用操作符与权限组合，如 chmod a+x fName
注意: x只是可被执行状态，真正能否执行得看文件
      目录赋予x才允许打开此时也可以进行复制等读功能，必须x+w才能操作（看增删移动等）文件目录
      目录赋予w能操作但编辑文件需要看文件权限，
      目录赋予r仅能看到目录下的文件列表，但无法看到详细信息
      目录仅有x，目录下文件仅有r，此时能查看文件内容
chattr [+-=][parm]： 修改文件目录的隐藏属性
    +-=与chmod一样
    A：设置A属性时，当存取此文件目录时，atime不会被修改，避免i/o过多存储硬盘（建议使用文件系统挂在参数处理这个项目）
    S：当修改文件时，会同步写入硬盘
    a：该文件只能增加数据，不能删除与修改
    c：存储时自动压缩文件，读取会解压缩
    d：当dump程序执行时，该文件不被dump背负你
    i：让一个文件不允许改名，删除，link，写入修改删除数据，root才能设置,但root也无法删除
    s：删除时永久删除
    u：删除文件并非真正删除，内容还在硬盘中
    ext文件系统全支持，xfs只支持AadiS
lsattr：显示文件隐藏属性

文件特殊权限：4SUID,2SGID,1SBIT
SUID(Set UID):仅对二进制程序有效，执行者需要有x权限，只在程序过程中有效，执行者具有程序拥有者权限
    举例说明：修改密码时执行passwd，passwd拥有者时root，用户有x权限，但修改密码需要修改/etc/shadow，而一般用户并没有对shadow的权限。此时赋予SUID权限后执行passwd后就让一般用户暂时拥有root权限去修改shadow
SGID(Set GID)：仅对二进制程序有效，执行者需要有x权限，只在程序过程中有效，执行者具有程序群组权限
SBIT(Sticky Bit)：只针对目录有效，用户对目录有wx权限，目录在该目录下简历文件或目录仅有自己与root才有权限删除改名搬移等操作
    也就是说当拥有这个权限的目录，其下的文件目录只有root与本身才能进行删除操作，其他用户即便777也无法让其消失
修改时在ugo前面加数字，如chmod 4777 x
    SUID和SGID分别占用u和g的x位，如果没有x则显示S，有x则显示s
    SBIT占用o的x位，如果没有x则显示T，有x则显示t



可分享：可以分享给其他系统挂载使用，能分享到互联网上的
不可分享：本机运行的系统文件或与程序相关的socket文件等，仅与本身有关
不变的：数据很少被修改，如lib，说明文件，系统管理员管理的主机服务配置文件等
可变的：经常修改的数据，如登录文件，一般用户自行收发的数据等

FHS要求/下的目录
/bin：单人维护模式下还能被操作的指令，能被一般用户与root使用（cat,ls,cp...）
/boot：放置开机会使用到的文件（Linux核心文件以及开机所需的配置文件等），kernel常用目录名vmlinuz, 引导/boot/grub2
/dev：所有硬件与接口设备以文件形式存放在此，如mem,tty等
/etc：存放系统主要的配置文件，一般只有root能修改而其他用户仅r。如人员账号密码文件passwd、第三方软件配置文件opt，服务启动文件等，
/lib：系统开机所使用lib，其下modules目录放置可抽换式核心相关模块（驱动）
/media：可移除设备，如U盘，光盘等
/mnt：与media相同
/opt：第三方软件存放目录，如KDE等，自己下载的软件也可以放这，不过旧的linux放在/usr/local中
/run：存放开机后产生的各项信息，旧版在/var/run中，由于/run可以使用内存来仿真，效率高很多
/sbin：存放开机过程所需要的环境，包括开机、修复、还原系统所需要的指令，某些服务器程序放到/usr/sbin中，本机自行安装的软件所产生的系统执行文件则存放到/usr/local/sbin中，包括mkfs，ifconfig等
/srv：一些网络服务启动后，服务所需要取用的数据目录，如WWW,FTP等如果系统的服务数据尚未要提供到互联网我中，建议放置/var/lib即可
/tmp：正执行的程序临时存放文件路径，需定期清理
/usr：见下
/var：见下
/home：默认用户家目录，新增用户会在home下新建同名目录
/lib<qual>：用来存放与lib不同的二进制lib，如64位的/lib64
/root：root家目录，一般该目录与根放置同一分区
/lost+found：ext文件系统格式才会产生的目录，用于发生错误时将一些遗失片段放在这
/proc：目录本身时一个虚拟文件系统，放置的数据都是在内存中，如系统核心、process，网络状态等
/sys：主要记录核心与系统硬件信息，包括目前已加载的核心模块与核心侦测到的硬件设备信息等，同样时存放到内存中的

/etc,/bin,/dev,/lib,/sbin目录要求与/放置在一起，所以很多发行版已经将此移出/usr之外了，因此/usr被建议为即便为只读，系统还是可以正常运行，所以救援模式也能挂在/usr

/usr(Unix Software Resource): 放置的数据数与可分享与不可变动的
/usr/bin：与/bin一致，一般将/bin链接在此
/usr/lib：与/lib一致，一般将/bin链接在此
/usr/lib<qual>：与/lib<qual>一致，一般将/bin链接在此
/usr/sbin: 与/sbin一致，一般将/bin链接在此
/usr/local：自行下载的软件建议安装路径
/usr/share：存放只读的数据文件，包括共享文件，不分硬件均可读取的。常见man, doc, zoneinfo等
/usr/game：游戏相关
/usr/include：c/c++等头文件，第三方库使用时可将头文件复制到此便于使用
/usr/libexec：不被一般使用者惯用的执行文件与脚本
/usr/src：一般源码存放路径，核心源码在/usr/src/linux下

/var(主要针对常态性变动的文件，如cache,log file,lock file, run file, Mysql数据库文件等)
/var/cache：应用程序运行中产生的数据
/var/lib：存放程序运行时所需要的数据文件，各自的文件到各自的目录，如Mysql的/var/lib/Mysql
/var/lock：某些设备或文件仅能被一个程序使用，此时有人使用就要上锁避免多人同时使用。有得发行版已经弄到/run/lock中
/var/log：登录文件存放路径，如messages，wtmp(记录登陆这信息)等，非常重要
/var/mail：放置邮件的目录，有的发行版放到/var/spool/mail中，这两个互为链接文件
/var/run：某些程序或服务启动后，会将其PID放在该目录下，与/run相同，链接到/run中
/var/spool：通常存放队列数据，所谓队列就是排队等待被其他应用使用的数据，通常使用后被删除

文件目录管理：
特殊的目录：. .. ~ ~account, -:前一个工作目录

pwd [-P]：获取当前路径， -P意味着当前路径的实际路径而非link路径（当前路径为link时可用）
mkdir：创建文件夹
    -m 000 : 设置目录权限权限
    -p： 递归创建目录
rmdir：删除 空 目录
    -p:连同上层的空目录也删除, rmdir -p test1/test2/test3

环境变量$PATH：执行的命令会按顺序从环境变量中的路径去找，因此越靠前越快找到
    不同身份的PATH不一样，可进行修改
    为了安全，效率不要将.加到PATH中

ls： 查看文件，目录信息
    -a：全部文件，连隐藏的文件也显示
    -A：与上一样，但不出现. ..
    -d：仅列出目录本身，而不是列出目录内的文件数据（ls dir会出现dir下的文件信息）
    -f：不排序输出，ls默认以文件名排序
    -F：根据文件、目录等信息，给予附加数据结构，如：* 代表可执行文件，/ 代表目录， = 代表socket文件，l 代表FIFO文件
    -h：将文件大小以gb，kb形式列出来
    -i：列出inodc号码
    -l：详细信息
    -n：列出UID与GID而非使用者与群组的名字
    -r：排序结果反序显示
    -R：连同子目录一并显示
    -S：以文件容量大小排序
    -t：按时间排序
    --color=never：部根据文件特性给予延伸显示
    --color=always：显示颜色
    --color=auto：系统判断是否给予颜色
    --full-time：完整形式输出时间
    --time={atime, ctime}：输出的时间为a/ctime而非modifiedtime

cp：复制（Ubuntu默认替换）
    -a：相当于-dr --preserver=all
    -d：若源文件为链接文件，那么复制的是链接的文件而非链接文件
    -f：强制（force），若目标文件存在切无法开启，则移出后再次尝试
    -i：若目标文件已存在，覆盖前会询问是否进行
    -l：进行硬式链接的链接文件简历，而非复制文件本身
    -p：将文件的属性（权限，用户，时间）一并复制，而非使用默认属性（备份常用）
    -r：递归复制
    -s：复制为符号链接文件，即快捷方式
    -u：destination比source旧或者destination不存在才进行复制
    --preserve=all：除了-p的权限参数外，还加入SELinux属性，links，xattr等也复制了

rm
    -f：forcce，忽略不存在文件，不出现警告
    -i：询问模式
    -r：递归删除目录

mv:移动或更名
    -f：force，若文件存在，直接覆盖
    -i：询问模式
    -u：若目标已存在则source较新才复制

basename：获取路径中最后的名字
dirname：!basename

cat：查看文件全部内容
    -A：相当于-vET组合
    -b：列出行号，仅针对非空白行做行号显示，空白行不标行号
    -E：断行字符$也显示
    -n：列出行号，空白行也显示
    -T：将[tab]以^I显示
    -v：列出看不出的特殊字符
tac：与cat一致，但从最后一行开始往上显示
nl：添加行号打印内容
    -b a：类似cat -n
    -b t：类似cat -b
    -n ln：行号在屏幕最左方显示
    -n rn：行号自身数字最右方显示，不加0
    -n rz：行号自身数字最右方显示，加0
    -w：行号占用字符数

more：翻页查看文档
    空格：向下翻一页
    Enter：向下一行
    /string：向下查找
    :f ：最底下显示文件名以及目前显示的行数
    b/ctrl b：向上翻一页
less：与more基本差不多，man就是less形式打开的
    空格，PageDowdn：下一页
    PageUp ：上一页
    Home：第一页
    End：最后一页
    /(?)string：向下查找， ?：向上查找
    n,N：正反向下一个搜索
    g：第一行、
    G：最后一行

head：读取前10行
    -n num：前num行
tail：读取后10行
    -n num：后num行
    -f：持续读取文件内容，直到强制退出
od [-t Type]：读取二进制文件
    -t 后接的Type参数
    a：默认字符显示
    c：使用ASCII
    d[size]：十进制输出，每个整数占用size bytes
    f[size]：浮点输出，每个整数占用size bytes
    o[size]：八进制输出，每个整数占用size bytes
    x[size]：十六进制输出，每个整数占用size bytes

mtime(modification time)：内容修改更新的时间
ctime(status time)：文件状态修改更新的四件
atime(access time)：文件被读取修改的时间

touch：修改文件时间或建立新档
    -a：修改文件atime
    -c：修改文件时间，不存在不建立新文件
    -d time：指定修改时间，不用当前时间，time格式为"日期或时间"
    -m：仅修改mtime
    -t time：指定修改时间，不用当前时间，time格式为YYYYMMDDhhmm

file：查看文件类型

指令查找：
which [-a] 指令：查找指令的路径（PATH的顺序）, -a只显示第一个

文件查找：
whereris [-bmsu] 文件目录名：
    -l：列出主要的查询目录
    -b：只找binary文件
    -m：只找说明文件在manual路径下
    -s：只找source源文件
    -u：搜索不在bsm中的特殊文件
locate / updatedb：在/var/lib/mlocate/下建立的数据库里面的数据查找，所以速度快很多
    一般发行版每天更新一次，执行updatedb命令会马上刷新（几分钟）
    -i：忽略大小写
    -c：仅计算找到的个数
    -l n：仅输出n行
    -S：输出locate所使用的的db相关信息，包括数据库文件/目录数量等
    -r：后面接正规表示法显示方式
find [PATH] [option] [action]：在硬盘中查找，可使用通配符
    -mtime [+]n：不含n n天前mtime被修改的文件
    -mtime -n：含n n天内mtime被修改的文件
    -newer file：file为存在的文件，列出file还要新的文件目录

    -uid n：用户账号ID为n的记录
    -gid n：群组ID为n的记录
    -user name：拥有者为name的文件
    -group name：群组为name的文件
    -nouser：拥有者在/etc/passwd中不存在的人
    -nogroup：拥有者在/etc/group中不存在的人

    -name fname：搜索文件名
    -size [+-]n：比n大/小的文件， c代表byte，k：kb; 如：find -size +50k
    -type TYPE：类型为TYPE的,f为正常文件，bc为设备文件，d目录，l链接文件，s socket，p FIFO文件
    -perm mode：查询权限必须等于mode的文件，如find -perm 4777，只能查到4777的文件
    -perm -mode：查询权限包含mode的文件，如find -perm 4444，则4555，4777
    -perm /mode：包含mode的任一权限
    
    特殊动作find / -perm /700 -exec ls -l {} \;
    {}:find找到的内容放置到{}位置中
    -exec 一直到\; 代表find额外动作起始， \用来转义的


